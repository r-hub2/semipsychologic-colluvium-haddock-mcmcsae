// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Crtuvn
double Crtuvn(const double l, const double u);
RcppExport SEXP _mcmcsae_Crtuvn(SEXP lSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(Crtuvn(l, u));
    return rcpp_result_gen;
END_RCPP
}
// Crtmvn_Gibbs_dense
Eigen::VectorXd Crtmvn_Gibbs_dense(const Eigen::Map<Eigen::VectorXd>& v, const Eigen::Map<Eigen::MatrixXd> Ut, const Eigen::Map<Eigen::VectorXd>& ustar, const double eps);
RcppExport SEXP _mcmcsae_Crtmvn_Gibbs_dense(SEXP vSEXP, SEXP UtSEXP, SEXP ustarSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Ut(UtSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type ustar(ustarSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Crtmvn_Gibbs_dense(v, Ut, ustar, eps));
    return rcpp_result_gen;
END_RCPP
}
// Crtmvn_Gibbs_sparse
NumericVector Crtmvn_Gibbs_sparse(const NumericVector& v, const SEXP Ut, const NumericVector& ustar, const double eps);
RcppExport SEXP _mcmcsae_Crtmvn_Gibbs_sparse(SEXP vSEXP, SEXP UtSEXP, SEXP ustarSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Ut(UtSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ustar(ustarSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Crtmvn_Gibbs_sparse(v, Ut, ustar, eps));
    return rcpp_result_gen;
END_RCPP
}
// Crtmvn_slice_Gibbs_dense
Eigen::VectorXd Crtmvn_slice_Gibbs_dense(const Eigen::Map<Eigen::VectorXd>& v, const Eigen::Map<Eigen::MatrixXd> Ut, const Eigen::Map<Eigen::VectorXd>& ustar, const double eps);
RcppExport SEXP _mcmcsae_Crtmvn_slice_Gibbs_dense(SEXP vSEXP, SEXP UtSEXP, SEXP ustarSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Ut(UtSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type ustar(ustarSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Crtmvn_slice_Gibbs_dense(v, Ut, ustar, eps));
    return rcpp_result_gen;
END_RCPP
}
// Crtmvn_slice_Gibbs_sparse
NumericVector Crtmvn_slice_Gibbs_sparse(const NumericVector& v, const SEXP Ut, const NumericVector& ustar, const double eps);
RcppExport SEXP _mcmcsae_Crtmvn_slice_Gibbs_sparse(SEXP vSEXP, SEXP UtSEXP, SEXP ustarSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Ut(UtSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ustar(ustarSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Crtmvn_slice_Gibbs_sparse(v, Ut, ustar, eps));
    return rcpp_result_gen;
END_RCPP
}
// CrTNprobit
NumericVector CrTNprobit(const NumericVector& mu, const NumericVector& y);
RcppExport SEXP _mcmcsae_CrTNprobit(SEXP muSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CrTNprobit(mu, y));
    return rcpp_result_gen;
END_RCPP
}
// TMVN_HMC_C
Eigen::VectorXd TMVN_HMC_C(const SEXP S, const int S_cols, const Eigen::Map<Eigen::VectorXd>& v0, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& s_adj, const Eigen::Map<Eigen::VectorXd>& refl_fac, const bool zero_mu, const Eigen::Map<Eigen::VectorXd>& mu, const bool simplified, const SEXP VS, const bool diagnostic, Eigen::Map<Eigen::VectorXi>& bounces, double t_sim, int max_refl);
RcppExport SEXP _mcmcsae_TMVN_HMC_C(SEXP SSEXP, SEXP S_colsSEXP, SEXP v0SEXP, SEXP x0SEXP, SEXP s_adjSEXP, SEXP refl_facSEXP, SEXP zero_muSEXP, SEXP muSEXP, SEXP simplifiedSEXP, SEXP VSSEXP, SEXP diagnosticSEXP, SEXP bouncesSEXP, SEXP t_simSEXP, SEXP max_reflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int >::type S_cols(S_colsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type s_adj(s_adjSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type refl_fac(refl_facSEXP);
    Rcpp::traits::input_parameter< const bool >::type zero_mu(zero_muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const bool >::type simplified(simplifiedSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type VS(VSSEXP);
    Rcpp::traits::input_parameter< const bool >::type diagnostic(diagnosticSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi>& >::type bounces(bouncesSEXP);
    Rcpp::traits::input_parameter< double >::type t_sim(t_simSEXP);
    Rcpp::traits::input_parameter< int >::type max_refl(max_reflSEXP);
    rcpp_result_gen = Rcpp::wrap(TMVN_HMC_C(S, S_cols, v0, x0, s_adj, refl_fac, zero_mu, mu, simplified, VS, diagnostic, bounces, t_sim, max_refl));
    return rcpp_result_gen;
END_RCPP
}
// cCHM_dsC_Cholesky
SEXP cCHM_dsC_Cholesky(SEXP a, SEXP perm, SEXP super, SEXP Imult, SEXP m, SEXP LDL);
RcppExport SEXP _mcmcsae_cCHM_dsC_Cholesky(SEXP aSEXP, SEXP permSEXP, SEXP superSEXP, SEXP ImultSEXP, SEXP mSEXP, SEXP LDLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type perm(permSEXP);
    Rcpp::traits::input_parameter< SEXP >::type super(superSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Imult(ImultSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< SEXP >::type LDL(LDLSEXP);
    rcpp_result_gen = Rcpp::wrap(cCHM_dsC_Cholesky(a, perm, super, Imult, m, LDL));
    return rcpp_result_gen;
END_RCPP
}
// cCHMf_solve
SEXP cCHMf_solve(SEXP a, SEXP b, SEXP system);
RcppExport SEXP _mcmcsae_cCHMf_solve(SEXP aSEXP, SEXP bSEXP, SEXP systemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    Rcpp::traits::input_parameter< SEXP >::type system(systemSEXP);
    rcpp_result_gen = Rcpp::wrap(cCHMf_solve(a, b, system));
    return rcpp_result_gen;
END_RCPP
}
// cCHMf_solve_matrix
SEXP cCHMf_solve_matrix(SEXP a, SEXP b, SEXP system);
RcppExport SEXP _mcmcsae_cCHMf_solve_matrix(SEXP aSEXP, SEXP bSEXP, SEXP systemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    Rcpp::traits::input_parameter< SEXP >::type system(systemSEXP);
    rcpp_result_gen = Rcpp::wrap(cCHMf_solve_matrix(a, b, system));
    return rcpp_result_gen;
END_RCPP
}
// cCHMf_spsolve
SEXP cCHMf_spsolve(SEXP a, SEXP b, SEXP system);
RcppExport SEXP _mcmcsae_cCHMf_spsolve(SEXP aSEXP, SEXP bSEXP, SEXP systemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    Rcpp::traits::input_parameter< SEXP >::type system(systemSEXP);
    rcpp_result_gen = Rcpp::wrap(cCHMf_spsolve(a, b, system));
    return rcpp_result_gen;
END_RCPP
}
// cCHM_update_inplace
SEXP cCHM_update_inplace(SEXP object, SEXP parent, SEXP mult);
RcppExport SEXP _mcmcsae_cCHM_update_inplace(SEXP objectSEXP, SEXP parentSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type object(objectSEXP);
    Rcpp::traits::input_parameter< SEXP >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(cCHM_update_inplace(object, parent, mult));
    return rcpp_result_gen;
END_RCPP
}
// CrPGapprox
NumericVector CrPGapprox(const int n, const NumericVector& b, const NumericVector& z, const IntegerVector& m);
RcppExport SEXP _mcmcsae_CrPGapprox(SEXP nSEXP, SEXP bSEXP, SEXP zSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CrPGapprox(n, b, z, m));
    return rcpp_result_gen;
END_RCPP
}
// Crnorm
NumericVector Crnorm(const int n, const double mean, const double sd);
RcppExport SEXP _mcmcsae_Crnorm(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(Crnorm(n, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// Crgig
NumericVector Crgig(const int n, const NumericVector& p, const NumericVector& a, const NumericVector& b);
RcppExport SEXP _mcmcsae_Crgig(SEXP nSEXP, SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Crgig(n, p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// CrCRT
IntegerVector CrCRT(const NumericVector& y, const NumericVector& r, const int m);
RcppExport SEXP _mcmcsae_CrCRT(SEXP ySEXP, SEXP rSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CrCRT(y, r, m));
    return rcpp_result_gen;
END_RCPP
}
// copy_vector
NumericVector copy_vector(const NumericVector& x);
RcppExport SEXP _mcmcsae_copy_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// v_update
void v_update(Eigen::Map<Eigen::VectorXd>& y, const bool plus, const Eigen::Map<Eigen::VectorXd>& x);
RcppExport SEXP _mcmcsae_v_update(SEXP ySEXP, SEXP plusSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool >::type plus(plusSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x(xSEXP);
    v_update(y, plus, x);
    return R_NilValue;
END_RCPP
}
// mv_update
void mv_update(Eigen::Map<Eigen::VectorXd>& y, const bool plus, const SEXP M, const Eigen::Map<Eigen::VectorXd>& x);
RcppExport SEXP _mcmcsae_mv_update(SEXP ySEXP, SEXP plusSEXP, SEXP MSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool >::type plus(plusSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x(xSEXP);
    mv_update(y, plus, M, x);
    return R_NilValue;
END_RCPP
}
// inverseSPD
Eigen::MatrixXd inverseSPD(const Eigen::Map<Eigen::MatrixXd>& M);
RcppExport SEXP _mcmcsae_inverseSPD(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseSPD(M));
    return rcpp_result_gen;
END_RCPP
}
// Ccholesky
Eigen::MatrixXd Ccholesky(const Eigen::Map<Eigen::MatrixXd> M);
RcppExport SEXP _mcmcsae_Ccholesky(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Ccholesky(M));
    return rcpp_result_gen;
END_RCPP
}
// Cbacksolve
Eigen::VectorXd Cbacksolve(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Cbacksolve(SEXP MSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Cbacksolve(M, y));
    return rcpp_result_gen;
END_RCPP
}
// Cforwardsolve
Eigen::VectorXd Cforwardsolve(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Cforwardsolve(SEXP MSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Cforwardsolve(M, y));
    return rcpp_result_gen;
END_RCPP
}
// CbacksolveM
Eigen::MatrixXd CbacksolveM(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _mcmcsae_CbacksolveM(SEXP MSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CbacksolveM(M, y));
    return rcpp_result_gen;
END_RCPP
}
// CforwardsolveM
Eigen::MatrixXd CforwardsolveM(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _mcmcsae_CforwardsolveM(SEXP MSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CforwardsolveM(M, y));
    return rcpp_result_gen;
END_RCPP
}
// dotprodC
double dotprodC(const Eigen::Map<Eigen::VectorXd>& x, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_dotprodC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dotprodC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fast_aggrC
NumericVector fast_aggrC(const NumericVector& x, const IntegerVector& group, const int n);
RcppExport SEXP _mcmcsae_fast_aggrC(SEXP xSEXP, SEXP groupSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_aggrC(x, group, n));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_numeric_prod
Eigen::VectorXd Csparse_numeric_prod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Csparse_numeric_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_numeric_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// CsparseS_numeric_prod
Eigen::VectorXd CsparseS_numeric_prod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_CsparseS_numeric_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CsparseS_numeric_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_numeric_prod
Eigen::VectorXd Cdense_numeric_prod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Cdense_numeric_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_numeric_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_numeric_crossprod
Eigen::VectorXd Cdense_numeric_crossprod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Cdense_numeric_crossprod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_numeric_crossprod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_numeric_crossprod
Eigen::VectorXd Csparse_numeric_crossprod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::VectorXd>& y);
RcppExport SEXP _mcmcsae_Csparse_numeric_crossprod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_numeric_crossprod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_dense_prod
Eigen::MatrixXd Cdense_dense_prod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _mcmcsae_Cdense_dense_prod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_dense_prod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_dense_prod
Eigen::MatrixXd Csparse_dense_prod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _mcmcsae_Csparse_dense_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_dense_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_sparse_prod
Eigen::MatrixXd Cdense_sparse_prod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::MappedSparseMatrix<double>& B);
RcppExport SEXP _mcmcsae_Cdense_sparse_prod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_sparse_prod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// CsparseS_dense_prod
Eigen::MatrixXd CsparseS_dense_prod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _mcmcsae_CsparseS_dense_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CsparseS_dense_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_sparseS_prod
Eigen::MatrixXd Cdense_sparseS_prod(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::MappedSparseMatrix<double>& Q);
RcppExport SEXP _mcmcsae_Cdense_sparseS_prod(SEXP MSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_sparseS_prod(M, Q));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_diag_prod
Eigen::MatrixXd Cdense_diag_prod(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::VectorXd>& d);
RcppExport SEXP _mcmcsae_Cdense_diag_prod(SEXP MSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_diag_prod(M, d));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_dense_crossprod
Eigen::MatrixXd Cdense_dense_crossprod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _mcmcsae_Cdense_dense_crossprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_dense_crossprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_dense_crossprod
Eigen::MatrixXd Csparse_dense_crossprod(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _mcmcsae_Csparse_dense_crossprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_dense_crossprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_sparse_crossprod
Eigen::MatrixXd Cdense_sparse_crossprod(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::MappedSparseMatrix<double>& B);
RcppExport SEXP _mcmcsae_Cdense_sparse_crossprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_sparse_crossprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_diag_crossprod
Eigen::MatrixXd Cdense_diag_crossprod(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::VectorXd>& d);
RcppExport SEXP _mcmcsae_Cdense_diag_crossprod(SEXP MSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_diag_crossprod(M, d));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_sparse_tcrossprod
Eigen::MatrixXd Cdense_sparse_tcrossprod(const Eigen::Map<Eigen::MatrixXd>& y, const Eigen::MappedSparseMatrix<double>& A);
RcppExport SEXP _mcmcsae_Cdense_sparse_tcrossprod(SEXP ySEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_sparse_tcrossprod(y, A));
    return rcpp_result_gen;
END_RCPP
}
// Cdiag_sparse_prod
Eigen::SparseMatrix<double> Cdiag_sparse_prod(const Eigen::Map<Eigen::VectorXd>& x, const Eigen::MappedSparseMatrix<double>& A);
RcppExport SEXP _mcmcsae_Cdiag_sparse_prod(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Cdiag_sparse_prod(x, A));
    return rcpp_result_gen;
END_RCPP
}
// sparse_sum_x
NumericVector sparse_sum_x(const int n, const IntegerVector& ind1, const IntegerVector& ind2, const NumericVector& M1x, const NumericVector& M2x, const bool UD1, const bool UD2, const double w1, const double w2);
RcppExport SEXP _mcmcsae_sparse_sum_x(SEXP nSEXP, SEXP ind1SEXP, SEXP ind2SEXP, SEXP M1xSEXP, SEXP M2xSEXP, SEXP UD1SEXP, SEXP UD2SEXP, SEXP w1SEXP, SEXP w2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind1(ind1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind2(ind2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type M1x(M1xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type M2x(M2xSEXP);
    Rcpp::traits::input_parameter< const bool >::type UD1(UD1SEXP);
    Rcpp::traits::input_parameter< const bool >::type UD2(UD2SEXP);
    Rcpp::traits::input_parameter< const double >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_sum_x(n, ind1, ind2, M1x, M2x, UD1, UD2, w1, w2));
    return rcpp_result_gen;
END_RCPP
}
// diagC
Eigen::VectorXd diagC(const Eigen::Map<Eigen::MatrixXd>& A);
RcppExport SEXP _mcmcsae_diagC(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(diagC(A));
    return rcpp_result_gen;
END_RCPP
}
// add_diagC
Eigen::MatrixXd add_diagC(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& d);
RcppExport SEXP _mcmcsae_add_diagC(SEXP ASEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(add_diagC(A, d));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_crossprod_sym0
Eigen::MatrixXd Cdense_crossprod_sym0(const Eigen::Map<Eigen::MatrixXd>& M);
RcppExport SEXP _mcmcsae_Cdense_crossprod_sym0(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_crossprod_sym0(M));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_crossprod_sym
Eigen::MatrixXd Cdense_crossprod_sym(const Eigen::Map<Eigen::MatrixXd>& M, const Eigen::Map<Eigen::VectorXd>& q);
RcppExport SEXP _mcmcsae_Cdense_crossprod_sym(SEXP MSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_crossprod_sym(M, q));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_sym_twist
Eigen::SparseMatrix<double> Csparse_sym_twist(const Eigen::MappedSparseMatrix<double> Q, const Eigen::Map<Eigen::VectorXi>& p);
RcppExport SEXP _mcmcsae_Csparse_sym_twist(SEXP QSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_sym_twist(Q, p));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_crossprod_sym2
NumericMatrix Cdense_crossprod_sym2(const NumericMatrix& A, const NumericMatrix& B);
RcppExport SEXP _mcmcsae_Cdense_crossprod_sym2(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_crossprod_sym2(A, B));
    return rcpp_result_gen;
END_RCPP
}
// CdiagU
SEXP CdiagU(const int n);
RcppExport SEXP _mcmcsae_CdiagU(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CdiagU(n));
    return rcpp_result_gen;
END_RCPP
}
// Cdiag
SEXP Cdiag(const NumericVector x);
RcppExport SEXP _mcmcsae_Cdiag(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Cdiag(x));
    return rcpp_result_gen;
END_RCPP
}
// Cscale_dense
Eigen::MatrixXd Cscale_dense(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& d);
RcppExport SEXP _mcmcsae_Cscale_dense(SEXP ASEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Cscale_dense(A, d));
    return rcpp_result_gen;
END_RCPP
}
// Cscale_sparse
Eigen::SparseMatrix<double> Cscale_sparse(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::VectorXd>& d);
RcppExport SEXP _mcmcsae_Cscale_sparse(SEXP ASEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Cscale_sparse(A, d));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_dense_crossprod_sym
Eigen::MatrixXd Csparse_dense_crossprod_sym(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::MatrixXd>& Q);
RcppExport SEXP _mcmcsae_Csparse_dense_crossprod_sym(SEXP ASEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_dense_crossprod_sym(A, Q));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_crossprod_sym
Eigen::SparseMatrix<double> Csparse_crossprod_sym(const Eigen::MappedSparseMatrix<double>& A, const Eigen::MappedSparseMatrix<double>& Q);
RcppExport SEXP _mcmcsae_Csparse_crossprod_sym(SEXP ASEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_crossprod_sym(A, Q));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_diag_crossprod_sym
Eigen::SparseMatrix<double> Csparse_diag_crossprod_sym(const Eigen::MappedSparseMatrix<double>& A, const Eigen::Map<Eigen::VectorXd>& Q);
RcppExport SEXP _mcmcsae_Csparse_diag_crossprod_sym(SEXP ASEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_diag_crossprod_sym(A, Q));
    return rcpp_result_gen;
END_RCPP
}
// Csparse_crossprod_sym2
Eigen::SparseMatrix<double> Csparse_crossprod_sym2(const Eigen::MappedSparseMatrix<double>& A, const Eigen::MappedSparseMatrix<double>& B);
RcppExport SEXP _mcmcsae_Csparse_crossprod_sym2(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Csparse_crossprod_sym2(A, B));
    return rcpp_result_gen;
END_RCPP
}
// prec2se_cor
Rcpp::List prec2se_cor(const Eigen::Map<Eigen::MatrixXd>& Q);
RcppExport SEXP _mcmcsae_prec2se_cor(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(prec2se_cor(Q));
    return rcpp_result_gen;
END_RCPP
}
// log1pexpC
NumericVector log1pexpC(const NumericVector& x);
RcppExport SEXP _mcmcsae_log1pexpC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexpC(x));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_kron
Eigen::MatrixXd Cdense_kron(const Eigen::Map<Eigen::MatrixXd>& M1, const Eigen::Map<Eigen::MatrixXd>& M2);
RcppExport SEXP _mcmcsae_Cdense_kron(SEXP M1SEXP, SEXP M2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type M2(M2SEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_kron(M1, M2));
    return rcpp_result_gen;
END_RCPP
}
// Crepgen
Eigen::VectorXd Crepgen(const Eigen::Map<Eigen::VectorXd>& v, const Eigen::Map<Eigen::VectorXi>& n, const Eigen::Map<Eigen::VectorXd>& M2);
RcppExport SEXP _mcmcsae_Crepgen(SEXP vSEXP, SEXP nSEXP, SEXP M2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type M2(M2SEXP);
    rcpp_result_gen = Rcpp::wrap(Crepgen(v, n, M2));
    return rcpp_result_gen;
END_RCPP
}
// Cnnz_per_col_scps_template
Eigen::VectorXi Cnnz_per_col_scps_template(const Eigen::MappedSparseMatrix<double>& X, const Eigen::VectorXi& j1_ind, const Eigen::VectorXi& j2_ind);
RcppExport SEXP _mcmcsae_Cnnz_per_col_scps_template(SEXP XSEXP, SEXP j1_indSEXP, SEXP j2_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type j1_ind(j1_indSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type j2_ind(j2_indSEXP);
    rcpp_result_gen = Rcpp::wrap(Cnnz_per_col_scps_template(X, j1_ind, j2_ind));
    return rcpp_result_gen;
END_RCPP
}
// Ccreate_sparse_crossprod_sym_template
Eigen::SparseMatrix<double> Ccreate_sparse_crossprod_sym_template(const Eigen::MappedSparseMatrix<double>& X, const Eigen::VectorXi& j1_ind, const Eigen::VectorXi& j2_ind, const Eigen::Map<Eigen::VectorXi>& nnz_per_col);
RcppExport SEXP _mcmcsae_Ccreate_sparse_crossprod_sym_template(SEXP XSEXP, SEXP j1_indSEXP, SEXP j2_indSEXP, SEXP nnz_per_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type j1_ind(j1_indSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type j2_ind(j2_indSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type nnz_per_col(nnz_per_colSEXP);
    rcpp_result_gen = Rcpp::wrap(Ccreate_sparse_crossprod_sym_template(X, j1_ind, j2_ind, nnz_per_col));
    return rcpp_result_gen;
END_RCPP
}
// Ctab
SEXP Ctab(const IntegerVector& Dim, const bool reduced, const IntegerVector& perm, const bool num, const NumericVector& x);
RcppExport SEXP _mcmcsae_Ctab(SEXP DimSEXP, SEXP reducedSEXP, SEXP permSEXP, SEXP numSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type Dim(DimSEXP);
    Rcpp::traits::input_parameter< const bool >::type reduced(reducedSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type perm(permSEXP);
    Rcpp::traits::input_parameter< const bool >::type num(numSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab(Dim, reduced, perm, num, x));
    return rcpp_result_gen;
END_RCPP
}
// Ctab_numeric_prod
NumericVector Ctab_numeric_prod(const SEXP A, const NumericVector& y, const bool ignore_x);
RcppExport SEXP _mcmcsae_Ctab_numeric_prod(SEXP ASEXP, SEXP ySEXP, SEXP ignore_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool >::type ignore_x(ignore_xSEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab_numeric_prod(A, y, ignore_x));
    return rcpp_result_gen;
END_RCPP
}
// Ctab_dense_prod
Eigen::MatrixXd Ctab_dense_prod(const SEXP A, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _mcmcsae_Ctab_dense_prod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab_dense_prod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Cdense_tab_tcrossprod
Eigen::MatrixXd Cdense_tab_tcrossprod(const Eigen::Map<Eigen::MatrixXd>& y, const SEXP A);
RcppExport SEXP _mcmcsae_Cdense_tab_tcrossprod(SEXP ySEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Cdense_tab_tcrossprod(y, A));
    return rcpp_result_gen;
END_RCPP
}
// Ctab_numeric_crossprod
NumericVector Ctab_numeric_crossprod(const SEXP A, const NumericVector& y);
RcppExport SEXP _mcmcsae_Ctab_numeric_crossprod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab_numeric_crossprod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Ctab_dense_crossprod
NumericMatrix Ctab_dense_crossprod(const SEXP A, const NumericMatrix& y);
RcppExport SEXP _mcmcsae_Ctab_dense_crossprod(SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab_dense_crossprod(A, y));
    return rcpp_result_gen;
END_RCPP
}
// Ctab_unary_crossprod
NumericVector Ctab_unary_crossprod(const SEXP A);
RcppExport SEXP _mcmcsae_Ctab_unary_crossprod(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab_unary_crossprod(A));
    return rcpp_result_gen;
END_RCPP
}
// Ctab2dgC
SEXP Ctab2dgC(const SEXP M);
RcppExport SEXP _mcmcsae_Ctab2dgC(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab2dgC(M));
    return rcpp_result_gen;
END_RCPP
}
// Ctab2mat
NumericMatrix Ctab2mat(const SEXP M);
RcppExport SEXP _mcmcsae_Ctab2mat(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Ctab2mat(M));
    return rcpp_result_gen;
END_RCPP
}
